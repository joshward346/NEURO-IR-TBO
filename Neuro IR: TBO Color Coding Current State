import numpy as np
import matplotlib.pyplot as plt
import os, glob
import pydicom
import pylab as pl
import sys
import matplotlib.path as mplPath
from matplotlib import cm
from matplotlib.path import Path

icaap = icaap = "C:/Users/shuaw/Documents/Neuro-IR-research/New folder/TBO2_symptoms/  (3)/EEDE04E2.dcm"
ds = pydicom.dcmread(icaap)
pix = ds.pixel_array

#plot each pixel across frames, but add in a re dotted line for the threshold
#had to flip the array because it was upside down, and then do it backwards because the files
#were flipped.
def plot_pixel_across_frames_w_threshold(pix, x, y, threshold):
    data = -1 * pix[::-1, x, y]
    fig, ax = plt.subplots()
    ax.plot(data)
    ax.set_xlabel('Time')
    ax.set_ylabel('Comparative Intensity')
    ax.set_title('Pixel Intensity Over Time')
    ax.axhline(y=threshold, color='r', linestyle='--')
    return data

#function that lets me know when we hit a significant level of contrast, with threshold set by visual inspection
def get_min_pixel_intensities(pix, threshold):
    num_frames = pix.shape[0]
    height, width = pix.shape[1], pix.shape[2]
    min_intensities = np.zeros((height, width))
    for i in range(height):
        for j in range(width):
            for k in range(num_frames):
                if -1 * pix[::-1, i, j][k] < threshold:
                    min_intensities[i, j] = num_frames - k
                    break
    return min_intensities

#makes a color map gives a shade of blue proportional to how long it takes for contrast to reach the area
#with a lighter shade of blue representing a longer period of time
def create_threshold_image(pix, threshold):
    min_intensities = get_min_pixel_intensities(pix, threshold)
    min_intensities = np.nan_to_num(min_intensities)
    min_intensities[min_intensities == 0] = 1
    color_map = cm.get_cmap('Blues', np.max(min_intensities) + 1)
    color_image = color_map(min_intensities / np.max(min_intensities))
    return color_image

#plots the colormap above
color_image = create_threshold_image(pix, threshold=-2825)
plt.imshow(color_image)
plt.show()

# create threshold image that's a rainbow-esque with 3 colors
def create_threshold_image(pix, threshold):
    min_intensities = get_min_pixel_intensities(pix, threshold)
    min_intensities = np.nan_to_num(min_intensities)
    min_intensities[min_intensities == 0] = 1
    max_intensities = np.max(min_intensities)
    cmap = cm.get_cmap('RdYlBu_r', max_intensities + 1)
    rgba_image = cmap((max_intensities - min_intensities) / max_intensities)

# define vertices and create paths for two masks
vertices1 = [(754, 213), (680, 192), (630, 382), (685, 482), (724, 505), (857, 469), (854, 365), (818, 284)]
codes1 = [Path.MOVETO] + [Path.LINETO]*6 + [Path.CLOSEPOLY]
path1 = Path(vertices1, codes1)

vertices2 = [(154, 213), (230, 192), (280, 382), (225, 482), (186, 505), (53, 469), (56, 365), (92, 284)]
vertices2 = [(x+144, y) for x, y in vertices2] # move mask over 144 pixels
codes2 = [Path.MOVETO] + [Path.LINETO]*6 + [Path.CLOSEPOLY]
path2 = Path(vertices2, codes2)

# plot image with masks
color_image = create_threshold_image(pix, threshold=-3000)
fig, ax = plt.subplots()
ax.imshow(color_image)

patch1 = plt.Polygon(vertices1, closed=True, fill=True, facecolor='red', alpha=0.5)
ax.add_patch(patch1)

patch2 = plt.Polygon(vertices2, closed=True, fill=True, facecolor='blue', alpha=0.5)
ax.add_patch(patch2)

# create masks for the two polygons
x, y = np.meshgrid(np.arange(pix.shape[1]), np.arange(pix.shape[0]))
x, y = x.flatten(), y.flatten()
points = np.vstack((x,y)).T
mask1 = path1.contains_points(points)
mask1 = mask1.reshape(pix.shape)

mask2 = path2.contains_points(points)
mask2 = mask2.reshape(pix.shape)

# create masked arrays and calculate averages
masked_pix1 = np.ma.masked_array(pix, mask=~mask1)
masked_pix2 = np.ma.masked_array(pix, mask=~mask2)

average_value1 = np.ma.average(masked_pix1)
average_value2 = np.ma.average(masked_pix2)

print("Average pixel value within polygon 1:", average_value1)
print("Average pixel value within polygon 2:", average_value2)

# divide values to get a single quantitative value
quantitative_value = average_value1 / average_value2

print("Quantitative value: ", quantitative_value)
